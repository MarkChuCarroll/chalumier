/*
 * Copyright 2024 Mark C. Chu-Carroll
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.goodmath.chalumier.design

import org.goodmath.chalumier.config.DescriptionParser
import org.goodmath.chalumier.util.assertFloatListEquals
import org.goodmath.chalumier.util.assertOptFloatListEquals
import org.junit.jupiter.api.Assertions.*
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import kotlin.io.path.Path
import kotlin.io.path.readText
import kotlin.io.path.reader

class WhistleDesignerKtTest {
    lateinit var designer: SixHoleWhistleDesigner



    @BeforeEach
    fun setup() {
        designer = folkWhistleDesigner("test", Path("/tmp/foo"))
        val cfg = DescriptionParser(Path("/Users/mark.chu-carroll/Hack/chalumier/examples/dwhistle.chal").reader()).parseConfig()
        designer.updateFromConfig(cfg)
    }

    @Test
    fun testProfile() {
        val dp = designer.initialDesignParameters()
        val inst = designer.makeInstrumentFromParameters(dp)
        assertFloatListEquals(listOf(0.0, 58.92773628488858, 176.78320885466573, 191.5151429258879,
            206.24707699711, 220.97901106833217, 294.6386814244429),
            inst.inner.pos, 1e-4, "pos")
        assertFloatListEquals(listOf(10.889444430272833, 10.889444430272833, 15.556349186104049,
            17.111984104714452, 17.111984104714452, 15.556349186104049, 15.556349186104049),
            designer.innerDiameters.map { it.first }, 1e-4, "inner diameters")

        assertFloatListEquals(listOf(10.889444430272833, 10.889444430272833, 15.556349186104049,
            17.111984104714452, 17.111984104714452,
            15.556349186104049, 15.556349186104049),
            inst.inner.low, 1e-4, "low")
        assertFloatListEquals(listOf(10.889444430272833, 10.889444430272833, 15.556349186104049, 17.111984104714452,
            17.111984104714452, 15.556349186104049, 15.556349186104049),
            inst.inner.high, 1e-5, "high")

        val v = inst.inner.asStepped(0.125)
        val expPos = arrayListOf(0.0, 58.92773628488858, 62.029196089356404, 65.13065589382423, 68.23211569829203, 71.33357550275986, 74.43503530722768, 77.5364951116955, 80.63795491616332, 83.73941472063115, 86.84087452509895, 89.94233432956678, 93.0437941340346, 96.14525393850242, 99.24671374297023, 102.34817354743805, 105.44963335190587, 108.5510931563737, 111.65255296084152, 114.75401276530934, 117.85547256977716, 120.95693237424499, 124.0583921787128, 127.15985198318062, 130.26131178764842, 133.36277159211625, 136.46423139658407, 139.5656912010519, 142.6671510055197, 145.76861080998754, 148.87007061445536, 151.97153041892318, 155.072990223391, 158.17445002785882, 161.27590983232665, 164.37736963679447, 167.4788294412623, 170.58028924573009, 173.68174905019788, 176.78320885466573, 177.91643455245205, 179.04966025023836, 180.18288594802468, 181.31611164581102, 182.44933734359734, 183.58256304138365, 184.71578873916997, 185.84901443695628, 186.9822401347426, 188.11546583252894, 189.24869153031526, 190.38191722810157, 191.5151429258879, 206.24707699711, 207.38030269489633, 208.51352839268264, 209.64675409046896, 210.7799797882553, 211.91320548604162, 213.04643118382793, 214.17965688161425, 215.31288257940056, 216.44610827718688, 217.57933397497322, 218.71255967275954, 219.84578537054585, 220.97901106833217, 294.6386814244429)
        val expLow = arrayListOf(10.889444430272833, 10.889444430272833, 10.950851071796928, 11.07366435484512, 11.196477637893308, 11.319290920941498, 11.442104203989688, 11.564917487037878, 11.687730770086068, 11.810544053134258, 11.933357336182448, 12.056170619230638, 12.178983902278826, 12.301797185327018, 12.424610468375207, 12.547423751423398, 12.670237034471587, 12.793050317519775, 12.915863600567967, 13.038676883616157, 13.161490166664347, 13.284303449712535, 13.407116732760727, 13.529930015808915, 13.652743298857104, 13.775556581905295, 13.898369864953484, 14.021183148001676, 14.143996431049864, 14.266809714098056, 14.389622997146244, 14.512436280194434, 14.635249563242624, 14.758062846290814, 14.880876129339004, 15.003689412387194, 15.126502695435384, 15.249315978483574, 15.372129261531764, 15.494942544579953, 15.616181298358294, 15.735845522866786, 15.85550974737528, 15.975173971883775, 16.094838196392267, 16.214502420900757, 16.33416664540925, 16.45383086991774, 16.573495094426235, 16.693159318934725, 16.812823543443223, 16.932487767951713, 17.052151992460207, 17.111984104714452, 17.052151992460207, 16.932487767951713, 16.812823543443223, 16.69315931893473, 16.573495094426235, 16.45383086991774, 16.33416664540925, 16.214502420900757, 16.094838196392267, 15.97517397188377, 15.85550974737528, 15.735845522866788, 15.616181298358294, 15.556349186104049)
        val expHigh = arrayListOf(10.889444430272833, 10.950851071796928, 11.07366435484512, 11.196477637893308, 11.319290920941498, 11.442104203989688, 11.564917487037878, 11.687730770086068, 11.810544053134258, 11.933357336182448, 12.056170619230638, 12.178983902278826, 12.301797185327018, 12.424610468375207, 12.547423751423398, 12.670237034471587, 12.793050317519775, 12.915863600567967, 13.038676883616157, 13.161490166664347, 13.284303449712535, 13.407116732760727, 13.529930015808915, 13.652743298857104, 13.775556581905295, 13.898369864953484, 14.021183148001676, 14.143996431049864, 14.266809714098056, 14.389622997146244, 14.512436280194434, 14.635249563242624, 14.758062846290814, 14.880876129339004, 15.003689412387194, 15.126502695435384, 15.249315978483574, 15.372129261531764, 15.494942544579953, 15.616181298358294, 15.735845522866786, 15.85550974737528, 15.975173971883775, 16.094838196392267, 16.214502420900757, 16.33416664540925, 16.45383086991774, 16.573495094426235, 16.693159318934725, 16.812823543443223, 16.932487767951713, 17.052151992460207, 17.111984104714452, 17.052151992460207, 16.932487767951713, 16.812823543443223, 16.69315931893473, 16.573495094426235, 16.45383086991774, 16.33416664540925, 16.214502420900757, 16.094838196392267, 15.97517397188377, 15.85550974737528, 15.735845522866788, 15.616181298358294, 15.556349186104049, 15.556349186104049)

        assertFloatListEquals(expPos, v.pos, 1e-4, "pos")
        assertFloatListEquals(expHigh, v.high, 1e-4, "high")
        assertFloatListEquals(expLow, v.low, 1e-4, "low")
    }

    @Test
    fun createProfile() {
    }


    @Test
    fun testInitialization() {
        assertEquals(0.0, designer.tweakEmissions)
        assertEquals(0.3, designer.tweakBoreLess)
        assertEquals(12, designer.transpose)
        assertEquals(1.1, designer.boreScale)
        assertEquals(0.6, designer.tweakGapExtra)
        assertFloatListEquals(listOf(2.333452377915607, 2.333452377915607, 2.333452377915607, 2.333452377915607,
            2.333452377915607, 2.333452377915607), designer.minHoleDiameters, 1e-4,
            "minHoleDiameters")
        assertFloatListEquals(listOf(9.333809511662428, 9.333809511662428, 9.333809511662428, 9.333809511662428, 9.333809511662428, 9.333809511662428),
            designer.maxHoleDiameters, 1e-4, "maxHoleDiameters")
        assertOptFloatListEquals(listOf(null, null, 17.5, null, null),
            designer.minHoleSpacing, 1e-4, "minHoleSpacing")
        assertOptFloatListEquals(listOf(24.748737341529164, 24.748737341529164, null, 24.748737341529164, 24.748737341529164),
            designer.maxHoleSpacing, 1e-4, "maxHoleSpacing")
        assertEquals(589.2773628488858, designer.initialLength, 1e-4)
        assertFloatListEquals(listOf(31.112698372208097, 21.778888860545667, 21.778888860545667,
            24.890158697766477, 24.890158697766477), designer.outerDiameters.map { it.first }, 1e-4,
            "outer diameters")
        assertFloatListEquals(listOf(10.889444430272833, 10.889444430272833, 15.556349186104049,
            17.111984104714452, 17.111984104714452, 15.556349186104049, 15.556349186104049),
            designer.innerDiameters.map { it.first }, 1e-4, "inner diameters")
        assertFloatListEquals(listOf(0.01, 0.5, 0.01, 0.01, 0.01, 0.01),
            designer.minInnerFractionSep, 1e-4, "minInnerFractionSep")
        assertFloatListEquals(listOf(0.2, 0.6, 0.65, 0.7, 0.75),
            designer.initialInnerFractions, 1e-4, "initialInnerFractions")



    }
}
