/*
 * Copyright 2024 Mark C. Chu-Carroll
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.goodmath.chalumier.design

import org.goodmath.chalumier.util.assertFloatListEquals
import org.junit.jupiter.api.Test


/**
 * A few tests of the profile system.
 *
 * Since I'm still not at 100% comprehension of this part of
 * the code, the way that I wrote tests was to check what the
 * original demakein code did, and then test that what my code
 * does produces the same result. So if demakein contains a bug
 * in the profiles, this will ensure that Chalumier contains the
 * same bug.
 */
class ProfileTest {

    @Test
    fun testAsStepped() {
        val original = Profile( arrayListOf(0.0, 46.31582173528054, 195.83121509884916, 199.82277668162098,
            203.68702410886493, 219.33029285913014, 293.1175969687102, 299.53010491999066),
            arrayListOf(10.889444430272833, 10.889444430272833, 15.556349186104049,
                17.111984104714452, 17.111984104714452, 15.556349186104049,
                15.556349186104049, 6.798425955608138),
            arrayListOf(10.889444430272833, 10.889444430272833, 15.556349186104049, 17.111984104714452,
                17.111984104714452, 15.556349186104049, 6.798425955608138, 6.798425955608138))

        val expectedPos = listOf(0.0, 46.31582173528054, 50.25043735011129, 54.185052964942045,
            58.1196685797728, 62.05428419460355, 65.9888998094343, 69.92351542426506,
            73.85813103909581, 77.79274665392656, 81.7273622687573, 85.66197788358807,
            89.59659349841883, 93.53120911324959, 97.46582472808032, 101.40044034291108,
            105.33505595774183, 109.26967157257258, 113.20428718740335, 117.13890280223409,
            121.07351841706485, 125.0081340318956, 128.94274964672636, 132.8773652615571,
            136.81198087638785, 140.7465964912186, 144.68121210604937, 148.61582772088013,
            152.55044333571087, 156.48505895054163, 160.41967456537236, 164.35429018020312,
            168.28890579503388, 172.22352140986465, 176.15813702469538, 180.09275263952617,
            184.0273682543569, 187.96198386918763, 191.8965994840184, 195.83121509884916,
            196.13825829752392, 196.44530149619868, 196.75234469487341, 197.05938789354818,
            197.36643109222294, 197.6734742908977, 197.98051748957243, 198.2875606882472,
            198.59460388692196, 198.90164708559672, 199.20869028427146, 199.51573348294622,
            199.82277668162098, 203.68702410886493, 204.89035247426995, 206.09368083967496,
            207.29700920507997, 208.500337570485, 209.70366593589, 210.90699430129501,
            212.11032266670006, 213.31365103210507, 214.51697939751008, 215.7203077629151,
            216.9236361283201, 218.12696449372513, 219.33029285913014, 293.1175969687102,
            299.53010491999066)
        val expectedLow = arrayListOf(10.889444430272833, 10.889444430272833, 10.950851071796928,
            11.073664354845118, 11.196477637893308, 11.319290920941498, 11.442104203989688,
            11.564917487037878, 11.687730770086068, 11.810544053134258, 11.933357336182446,
            12.056170619230636, 12.178983902278826, 12.301797185327018, 12.424610468375207,
            12.547423751423397, 12.670237034471587, 12.793050317519777, 12.915863600567967,
            13.038676883616155, 13.161490166664347, 13.284303449712535, 13.407116732760727,
            13.529930015808915, 13.652743298857105, 13.775556581905295, 13.898369864953485,
            14.021183148001676, 14.143996431049864, 14.266809714098056, 14.389622997146244,
            14.512436280194434, 14.635249563242624, 14.758062846290814, 14.880876129339002,
            15.003689412387192, 15.126502695435384, 15.249315978483573, 15.372129261531763,
            15.494942544579953, 15.616181298358295, 15.735845522866791, 15.855509747375276,
            15.975173971883772, 16.094838196392264, 16.21450242090076, 16.334166645409255,
            16.453830869917738, 16.573495094426235, 16.693159318934732, 16.812823543443216,
            16.93248776795171, 17.052151992460203, 17.111984104714452, 17.052151992460203,
            16.932487767951713, 16.812823543443223, 16.69315931893473, 16.573495094426235,
            16.453830869917745, 16.33416664540925, 16.214502420900757, 16.094838196392264,
            15.975173971883772, 15.85550974737528, 15.735845522866788, 15.616181298358294,
            15.55634918610405, 6.798425955608138)
        val expectedHigh = arrayListOf(10.889444430272833, 10.950851071796928, 11.073664354845118,
            11.196477637893308, 11.319290920941498, 11.442104203989688, 11.564917487037878,
            11.687730770086068, 11.810544053134258, 11.933357336182446, 12.056170619230636,
            12.178983902278826, 12.301797185327018, 12.424610468375207, 12.547423751423397,
            12.670237034471587, 12.793050317519777, 12.915863600567967, 13.038676883616155,
            13.161490166664347, 13.284303449712535, 13.407116732760727, 13.529930015808915,
            13.652743298857105, 13.775556581905295, 13.898369864953485, 14.021183148001676,
            14.143996431049864, 14.266809714098056, 14.389622997146244, 14.512436280194434,
            14.635249563242624, 14.758062846290814, 14.880876129339002, 15.003689412387192,
            15.126502695435384, 15.249315978483573, 15.372129261531763, 15.494942544579953,
            15.616181298358295, 15.735845522866791, 15.855509747375276, 15.975173971883772,
            16.094838196392264, 16.21450242090076, 16.334166645409255, 16.453830869917738,
            16.573495094426235, 16.693159318934732, 16.812823543443216, 16.93248776795171,
            17.052151992460203, 17.111984104714452, 17.052151992460203, 16.932487767951713,
            16.812823543443223, 16.69315931893473, 16.573495094426235, 16.453830869917745,
            16.33416664540925, 16.214502420900757, 16.094838196392264, 15.975173971883772,
            15.85550974737528, 15.735845522866788, 15.616181298358294, 15.55634918610405,
            6.798425955608138, 6.798425955608138)
        val actual = original.asStepped(0.125)
        assertFloatListEquals(expectedPos, actual.pos, 1e-4, "pos")
        assertFloatListEquals(expectedLow, actual.low, 1e-4, "low")
        assertFloatListEquals(expectedHigh, actual.high, 1e-4, "high")
    }

    @Test
    fun testCurvedProfile() {
        val ik = arrayListOf(0.0, 58.92773628488858, 176.78320885466573, 191.5151429258879, 206.24707699711, 220.97901106833217, 294.6386814244429)
        val il = arrayListOf(10.889444430272833, 10.889444430272833, 15.556349186104049, 17.111984104714452, 17.111984104714452, 15.556349186104049, 15.556349186104049)
        val ih= arrayListOf(10.889444430272833, 10.889444430272833, 15.556349186104049, 17.111984104714452, 17.111984104714452, 15.556349186104049, 15.556349186104049)
        val ial: ArrayList<Angle?> = arrayListOf(null, null, null, null, null, null, null)
        val iah: ArrayList<Angle?> =arrayListOf(null, null, null, null, null, null, null)

        val cp = Profile.curvedProfile(ik, il, ih, ial, iah)

        val expPos = arrayListOf(0.0, 58.92773628488858, 176.78320885466573, 191.5151429258879, 206.24707699711, 220.97901106833217, 294.6386814244429)
        val expLow = arrayListOf(10.889444430272833, 10.889444430272833, 15.556349186104049, 17.111984104714452, 17.111984104714452, 15.556349186104049, 15.556349186104049)
        val expHigh = arrayListOf(10.889444430272833, 10.889444430272833, 15.556349186104049, 17.111984104714452, 17.111984104714452, 15.556349186104049, 15.556349186104049)

        assertFloatListEquals(expPos, cp.pos, 1e-4, "pos")
        assertFloatListEquals(expLow, cp.low, 1e-4, "low")
        assertFloatListEquals(expHigh, cp.high, 1e-4, "high")
    }
}
