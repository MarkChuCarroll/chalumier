/*
 * Copyright 2024 Mark C. Chu-Carroll
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.goodmath.chalumier.design

import org.goodmath.chalumier.design.instruments.ReedInstrument
import org.goodmath.chalumier.util.assertFloatListEquals
import org.junit.jupiter.api.Test

import org.junit.jupiter.api.BeforeEach
import kotlin.io.path.Path

class ShawmDesignerTest {
    lateinit var designer: FolkShawmDesigner
    lateinit var inst: ReedInstrument
    @BeforeEach
    fun setUp() {
        designer = FolkShawmDesigner("folkShawm",
            Path("/tmp/test"))
        inst = designer.makeInstrumentFromParameters(designer.initialDesignParameters()) as ReedInstrument
    }

    @Test
    fun testFullRange() {
        val diameters = designer.boreScaler(ReedInstrumentDesigner.fullRange(16.0, 4.0, 10))
        val expected = listOf(
            16.0, 14.666666666666666, 13.333333333333334, 12.0, 10.666666666666668,
            9.333333333333332, 8.0, 6.666666666666666, 5.333333333333334, 4.0
        )
        assertFloatListEquals(expected, diameters, 1e-4, "diameters")
    }

    @Test
    fun testInstrumentProfile() {
        val expectedPos = listOf(
            0.0,
            132.28829514514118,
            198.43244271771178,
            264.57659029028235,
            330.7207378628529,
            396.86488543542356,
            463.0090330079941,
            529.1531805805646,
            595.2973281531353,
            661.4414757257059
        )
        val expectedLow = listOf(
            16.0,
            14.666666666666666,
            13.333333333333334,
            12.0,
            10.666666666666668,
            9.333333333333332,
            8.0,
            6.666666666666666,
            5.333333333333334,
            4.0
        )
        val expectedHigh = listOf(
            16.0,
            14.666666666666666,
            13.333333333333334,
            12.0,
            10.666666666666668,
            9.333333333333332,
            8.0,
            6.666666666666666,
            5.333333333333334,
            4.0
        )
        assertFloatListEquals(expectedPos, inst.inner.pos, 1e-4, "pos")
        assertFloatListEquals(expectedLow, inst.inner.low, 1e-4, "low")
        assertFloatListEquals(expectedHigh, inst.inner.high, 1e-4, "high")

        val expectedSteppedPos = listOf(
            0.0,
            12.026208649558288,
            24.052417299116577,
            36.07862594867486,
            48.104834598233154,
            60.131043247791446,
            72.15725189734972,
            84.18346054690802,
            96.20966919646631,
            108.2358778460246,
            120.26208649558289,
            132.28829514514118,
            138.3013994699203,
            144.31450379469948,
            150.3276081194786,
            156.34071244425775,
            162.3538167690369,
            168.36692109381605,
            174.3800254185952,
            180.39312974337435,
            186.40623406815348,
            192.41933839293264,
            198.43244271771178,
            204.44554704249092,
            210.45865136727008,
            216.47175569204921,
            222.48486001682835,
            228.49796434160749,
            234.51106866638665,
            240.52417299116578,
            246.53727731594492,
            252.55038164072405,
            258.5634859655032,
            264.57659029028235,
            270.5896946150615,
            276.6027989398406,
            282.61590326461976,
            288.6290075893989,
            294.64211191417803,
            300.6552162389572,
            306.66832056373636,
            312.6814248885155,
            318.69452921329463,
            324.70763353807376,
            330.7207378628529,
            336.73384218763204,
            342.7469465124112,
            348.76005083719036,
            354.7731551619695,
            360.78625948674863,
            366.7993638115278,
            372.81246813630696,
            378.8255724610861,
            384.83867678586523,
            390.8517811106444,
            396.86488543542356,
            402.8779897602027,
            408.89109408498183,
            414.90419840976097,
            420.9173027345401,
            426.93040705931924,
            432.94351138409843,
            438.95661570887756,
            444.9697200336567,
            450.98282435843583,
            456.99592868321497,
            463.0090330079941,
            469.02213733277324,
            475.0352416575524,
            481.0483459823315,
            487.06145030711065,
            493.0745546318898,
            499.0876589566689,
            505.10076328144805,
            511.1138676062272,
            517.1269719310063,
            523.1400762557855,
            529.1531805805646,
            535.1662849053438,
            541.1793892301229,
            547.1924935549021,
            553.2055978796812,
            559.2187022044603,
            565.2318065292395,
            571.2449108540186,
            577.2580151787978,
            583.271119503577,
            589.2842238283561,
            595.2973281531353,
            601.3104324779144,
            607.3235368026935,
            613.3366411274727,
            619.3497454522519,
            625.362849777031,
            631.3759541018102,
            637.3890584265893,
            643.4021627513685,
            649.4152670761476,
            655.4283714009267,
            661.4414757257059
        )
        val expectedSteppedLow = listOf(
            15.93939393939394,
            15.93939393939394,
            15.818181818181818,
            15.696969696969695,
            15.575757575757574,
            15.454545454545453,
            15.333333333333332,
            15.212121212121211,
            15.09090909090909,
            14.969696969696969,
            14.848484848484848,
            14.727272727272727,
            14.606060606060606,
            14.484848484848484,
            14.363636363636363,
            14.242424242424242,
            14.121212121212121,
            14.0,
            13.878787878787879,
            13.757575757575758,
            13.636363636363637,
            13.515151515151516,
            13.393939393939394,
            13.272727272727273,
            13.151515151515152,
            13.03030303030303,
            12.90909090909091,
            12.787878787878789,
            12.666666666666668,
            12.545454545454547,
            12.424242424242426,
            12.303030303030305,
            12.181818181818183,
            12.06060606060606,
            11.93939393939394,
            11.81818181818182,
            11.696969696969697,
            11.575757575757578,
            11.454545454545455,
            11.333333333333334,
            11.212121212121213,
            11.09090909090909,
            10.96969696969697,
            10.84848484848485,
            10.727272727272728,
            10.606060606060607,
            10.484848484848486,
            10.363636363636365,
            10.242424242424242,
            10.121212121212121,
            10.0,
            9.878787878787879,
            9.757575757575758,
            9.636363636363635,
            9.515151515151514,
            9.393939393939393,
            9.272727272727272,
            9.15151515151515,
            9.03030303030303,
            8.90909090909091,
            8.787878787878787,
            8.666666666666666,
            8.545454545454545,
            8.424242424242422,
            8.303030303030303,
            8.181818181818182,
            8.06060606060606,
            7.9393939393939394,
            7.818181818181819,
            7.696969696969696,
            7.575757575757576,
            7.454545454545453,
            7.333333333333334,
            7.212121212121211,
            7.090909090909091,
            6.969696969696969,
            6.848484848484849,
            6.727272727272726,
            6.606060606060604,
            6.4848484848484835,
            6.363636363636364,
            6.242424242424241,
            6.121212121212121,
            6.000000000000002,
            5.878787878787879,
            5.757575757575758,
            5.6363636363636385,
            5.5151515151515165,
            5.393939393939394,
            5.272727272727274,
            5.151515151515152,
            5.03030303030303,
            4.90909090909091,
            4.787878787878787,
            4.666666666666666,
            4.545454545454546,
            4.4242424242424265,
            4.303030303030302,
            4.181818181818182,
            4.060606060606062
        )
        val expectedSteppedHigh = listOf(
            15.93939393939394,
            15.818181818181818,
            15.696969696969695,
            15.575757575757574,
            15.454545454545453,
            15.333333333333332,
            15.212121212121211,
            15.09090909090909,
            14.969696969696969,
            14.848484848484848,
            14.727272727272727,
            14.606060606060606,
            14.484848484848484,
            14.363636363636363,
            14.242424242424242,
            14.121212121212121,
            14.0,
            13.878787878787879,
            13.757575757575758,
            13.636363636363637,
            13.515151515151516,
            13.393939393939394,
            13.272727272727273,
            13.151515151515152,
            13.03030303030303,
            12.90909090909091,
            12.787878787878789,
            12.666666666666668,
            12.545454545454547,
            12.424242424242426,
            12.303030303030305,
            12.181818181818183,
            12.06060606060606,
            11.93939393939394,
            11.81818181818182,
            11.696969696969697,
            11.575757575757578,
            11.454545454545455,
            11.333333333333334,
            11.212121212121213,
            11.09090909090909,
            10.96969696969697,
            10.84848484848485,
            10.727272727272728,
            10.606060606060607,
            10.484848484848486,
            10.363636363636365,
            10.242424242424242,
            10.121212121212121,
            10.0,
            9.878787878787879,
            9.757575757575758,
            9.636363636363635,
            9.515151515151514,
            9.393939393939393,
            9.272727272727272,
            9.15151515151515,
            9.03030303030303,
            8.90909090909091,
            8.787878787878787,
            8.666666666666666,
            8.545454545454545,
            8.424242424242422,
            8.303030303030303,
            8.181818181818182,
            8.06060606060606,
            7.9393939393939394,
            7.818181818181819,
            7.696969696969696,
            7.575757575757576,
            7.454545454545453,
            7.333333333333334,
            7.212121212121211,
            7.090909090909091,
            6.969696969696969,
            6.848484848484849,
            6.727272727272726,
            6.606060606060604,
            6.4848484848484835,
            6.363636363636364,
            6.242424242424241,
            6.121212121212121,
            6.000000000000002,
            5.878787878787879,
            5.757575757575758,
            5.6363636363636385,
            5.5151515151515165,
            5.393939393939394,
            5.272727272727274,
            5.151515151515152,
            5.03030303030303,
            4.90909090909091,
            4.787878787878787,
            4.666666666666666,
            4.545454545454546,
            4.4242424242424265,
            4.303030303030302,
            4.181818181818182,
            4.060606060606062,
            4.060606060606062
        )

        val stepped = inst.inner.asStepped(0.125)
        assertFloatListEquals(expectedSteppedPos, stepped.pos, 1e-4, "steppedPos")
        assertFloatListEquals(expectedSteppedLow, stepped.low, 1e-4, "steppedLow")
        assertFloatListEquals(expectedSteppedHigh, stepped.high, 1e-4, "steppedHigh")
    }

    @Test
    fun testInstrumentHolePositions() {

    }

}